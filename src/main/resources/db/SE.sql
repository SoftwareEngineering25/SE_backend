drop DATABASE SE;
CREATE DATABASE SE;
USE SE;


-- ========================================================
-- MySQL Table Creation Script based on ERD
-- ========================================================

-- 회원 테이블 (DR_USER)
CREATE TABLE DR_USER (
    USER_NUMBER     BIGINT          NOT NULL AUTO_INCREMENT COMMENT '회원번호 (PK)',
    USER_EMAIL      VARCHAR(100)    NOT NULL COMMENT '이메일 (UK)',
    USER_PW         VARCHAR(100)    NOT NULL COMMENT '비밀번호',
    USER_NICKNAME   VARCHAR(100)    NOT NULL COMMENT '닉네임 (UK)',
    USER_PHONE      VARCHAR(100)    NOT NULL COMMENT '핸드폰 (UK)',
    USER_STATUS     VARCHAR(100)    NOT NULL DEFAULT '일반회원' COMMENT '상태 (일반회원, 구글회원)',
    PROVIDER        VARCHAR(50)     NULL COMMENT '제공자 (OAuth)',
    PROVIDER_ID     VARCHAR(255)    NULL COMMENT '제공된 ID (OAuth)',
    PROFILE_PIC     VARCHAR(255)    NULL DEFAULT 'basicProfile.png' COMMENT '프로필사진 경로',
    PRIMARY KEY (USER_NUMBER),
    UNIQUE KEY UK_USER_EMAIL (USER_EMAIL),
    UNIQUE KEY UK_USER_NICKNAME (USER_NICKNAME),
    UNIQUE KEY UK_USER_PHONE (USER_PHONE),
    CONSTRAINT CHK_USER_STATUS CHECK (USER_STATUS IN ('일반회원', '구글회원'))
) COMMENT '회원 정보 테이블';

-- 게시판 테이블 (DR_BOARD)
CREATE TABLE DR_BOARD (
    BOARD_NUMBER        BIGINT          NOT NULL AUTO_INCREMENT COMMENT '게시글 번호 (PK)',
    USER_NUMBER         BIGINT          NOT NULL COMMENT '작성 회원번호 (FK)',
    BOARD_TITLE         VARCHAR(100)    NOT NULL COMMENT '제목',
    BOARD_TEXT          TEXT            NOT NULL COMMENT '내용',
    BOARD_WRITE_DATE    DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '작성일',
    BOARD_MODIFY_DATE   DATETIME        NULL COMMENT '수정일',
    BOARD_TYPE          VARCHAR(100)    NOT NULL COMMENT '종류 (꿀팁게시판, 자유게시판)',
    PRIMARY KEY (BOARD_NUMBER),
    CONSTRAINT FK_BOARD_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE, -- 사용자가 삭제되면 게시글도 삭제
    CONSTRAINT CHK_BOARD_TYPE CHECK (BOARD_TYPE IN ('꿀팁게시판', '자유게시판'))
) COMMENT '게시판 테이블 (자유, 꿀팁)';

-- 레시피 테이블 (DR_RECIPE) - ERD에 명시적 컬럼 부족, 추정하여 생성
CREATE TABLE DR_RECIPE (
    RECIPE_NUMBER       BIGINT          NOT NULL AUTO_INCREMENT COMMENT '레시피 번호 (PK)',
    USER_NUMBER         BIGINT          NOT NULL COMMENT '작성 회원번호 (FK)',
    RECIPE_TITLE        VARCHAR(255)    NOT NULL COMMENT '레시피 제목',
    RECIPE_TEXT         TEXT            NOT NULL COMMENT '레시피 내용',
    RECIPE_WRITE_DATE   DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '작성일',
    RECIPE_MODIFY_DATE  DATETIME        NULL COMMENT '수정일',
    RECIPE_TYPE         VARCHAR(100)    NULL COMMENT '레시피 종류 (예: 한식, 중식)',
    PRIMARY KEY (RECIPE_NUMBER),
    CONSTRAINT FK_RECIPE_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE -- 사용자가 삭제되면 레시피도 삭제
) COMMENT '레시피 정보 테이블';

-- 댓글 테이블 (DR_REPLY)
CREATE TABLE DR_REPLY (
    REPLY_NUMBER        BIGINT          NOT NULL AUTO_INCREMENT COMMENT '댓글번호 (PK)',
    USER_NUMBER         BIGINT          NOT NULL COMMENT '작성 회원번호 (FK)',
    BOARD_NUMBER        BIGINT          NULL COMMENT '원본 게시글 번호 (FK)',
    RECIPE_NUMBER       BIGINT          NULL COMMENT '원본 레시피 번호 (FK)',
    REPLY_TEXT          VARCHAR(500)    NOT NULL COMMENT '댓글내용',
    REPLY_WRITE_DATE    DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '댓글작성일',
    REPLY_MODIFY_DATE   DATETIME        NULL COMMENT '댓글수정일',
    PRIMARY KEY (REPLY_NUMBER),
    CONSTRAINT FK_REPLY_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE, -- 사용자가 삭제되면 댓글도 삭제
    CONSTRAINT FK_REPLY_BOARD FOREIGN KEY (BOARD_NUMBER) REFERENCES DR_BOARD(BOARD_NUMBER) ON DELETE CASCADE, -- 게시글이 삭제되면 댓글도 삭제
    CONSTRAINT FK_REPLY_RECIPE FOREIGN KEY (RECIPE_NUMBER) REFERENCES DR_RECIPE(RECIPE_NUMBER) ON DELETE CASCADE, -- 레시피가 삭제되면 댓글도 삭제
    CONSTRAINT CHK_REPLY_TARGET CHECK ( (BOARD_NUMBER IS NOT NULL AND RECIPE_NUMBER IS NULL) OR (BOARD_NUMBER IS NULL AND RECIPE_NUMBER IS NOT NULL) ) -- 게시글 또는 레시피 둘 중 하나에만 속해야 함
) COMMENT '댓글 테이블';

-- 추천(좋아요) 테이블 (DR_GOOD)
CREATE TABLE DR_GOOD (
    GOOD_NUMBER     BIGINT      NOT NULL AUTO_INCREMENT COMMENT '추천번호 (PK)',
    USER_NUMBER     BIGINT      NOT NULL COMMENT '추천한 회원번호 (FK)',
    BOARD_NUMBER    BIGINT      NULL COMMENT '추천된 게시글 번호 (FK)',
    RECIPE_NUMBER   BIGINT      NULL COMMENT '추천된 레시피 번호 (FK)',
    GOOD_DATE       DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '추천일시',
    PRIMARY KEY (GOOD_NUMBER),
    CONSTRAINT FK_GOOD_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE,
    CONSTRAINT FK_GOOD_BOARD FOREIGN KEY (BOARD_NUMBER) REFERENCES DR_BOARD(BOARD_NUMBER) ON DELETE CASCADE,
    CONSTRAINT FK_GOOD_RECIPE FOREIGN KEY (RECIPE_NUMBER) REFERENCES DR_RECIPE(RECIPE_NUMBER) ON DELETE CASCADE,
    UNIQUE KEY UK_GOOD_USER_BOARD (USER_NUMBER, BOARD_NUMBER), -- 사용자는 게시글당 한 번만 추천 가능
    UNIQUE KEY UK_GOOD_USER_RECIPE (USER_NUMBER, RECIPE_NUMBER), -- 사용자는 레시피당 한 번만 추천 가능
    CONSTRAINT CHK_GOOD_TARGET CHECK ( (BOARD_NUMBER IS NOT NULL AND RECIPE_NUMBER IS NULL) OR (BOARD_NUMBER IS NULL AND RECIPE_NUMBER IS NOT NULL) ) -- 게시글 또는 레시피 둘 중 하나만 추천
) COMMENT '추천(좋아요) 테이블';

-- 포인트 상품 테이블 (DR_PRODUCT)
CREATE TABLE DR_PRODUCT (
    PRODUCT_NUMBER  BIGINT          NOT NULL AUTO_INCREMENT COMMENT '상품 번호 (PK)',
    PRODUCT_NAME    VARCHAR(100)    NOT NULL COMMENT '상품명',
    PRODUCT_CODE    VARCHAR(100)    NULL COMMENT '상품 코드 (UK)',
    PRODUCT_PRICE   INT             NOT NULL COMMENT '상품 가격 (포인트)',
    PRIMARY KEY (PRODUCT_NUMBER),
    UNIQUE KEY UK_PRODUCT_CODE (PRODUCT_CODE)
) COMMENT '포인트 상품 테이블';

-- 사진 테이블 (DR_PHOTO)
CREATE TABLE DR_PHOTO (
    PHOTO_NUMBER        BIGINT          NOT NULL AUTO_INCREMENT COMMENT '사진 번호 (PK)',
    PHOTO_ORIGINAL      VARCHAR(255)    NOT NULL COMMENT '원본 파일명',
    PHOTO_LOCAL         VARCHAR(255)    NOT NULL COMMENT '서버 저장 파일명/경로',
    PHOTO_SIZE          BIGINT          NULL COMMENT '파일 사이즈 (bytes)',
    PHOTO_UPLOAD_DATE   DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '업로드 시간',
    USER_NUMBER         BIGINT          NULL COMMENT '연관 회원번호 (FK, 프로필사진 등)',
    BOARD_NUMBER        BIGINT          NULL COMMENT '연관 게시글 번호 (FK)',
    RECIPE_NUMBER       BIGINT          NULL COMMENT '연관 레시피 번호 (FK)',
    PRODUCT_NUMBER      BIGINT          NULL COMMENT '연관 상품 번호 (FK)',
    PRIMARY KEY (PHOTO_NUMBER),
    CONSTRAINT FK_PHOTO_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE SET NULL, -- 사용자가 삭제되어도 사진은 남길 수 있음 (선택적)
    CONSTRAINT FK_PHOTO_BOARD FOREIGN KEY (BOARD_NUMBER) REFERENCES DR_BOARD(BOARD_NUMBER) ON DELETE CASCADE, -- 게시글 삭제시 사진 삭제
    CONSTRAINT FK_PHOTO_RECIPE FOREIGN KEY (RECIPE_NUMBER) REFERENCES DR_RECIPE(RECIPE_NUMBER) ON DELETE CASCADE, -- 레시피 삭제시 사진 삭제
    CONSTRAINT FK_PHOTO_PRODUCT FOREIGN KEY (PRODUCT_NUMBER) REFERENCES DR_PRODUCT(PRODUCT_NUMBER) ON DELETE CASCADE -- 상품 삭제시 사진 삭제
    -- 참고: 어떤 대상(USER, BOARD, RECIPE, PRODUCT)에 속한 사진인지 명확히 하기 위한 CHECK 제약조건 추가 고려
    -- CONSTRAINT CHK_PHOTO_OWNER CHECK ( (CASE WHEN USER_NUMBER IS NOT NULL THEN 1 ELSE 0 END) + ... = 1 )
) COMMENT '사진 정보 테이블';

-- 신고 테이블 (DR_SIREN)
CREATE TABLE DR_SIREN (
    SIREN_NUMBER    BIGINT          NOT NULL AUTO_INCREMENT COMMENT '신고번호 (PK)',
    USER_NUMBER     BIGINT          NOT NULL COMMENT '신고한 회원번호 (FK)',
    BOARD_NUMBER    BIGINT          NULL COMMENT '신고된 게시글 번호 (FK)',
    REPLY_NUMBER    BIGINT          NULL COMMENT '신고된 댓글 번호 (FK)',
    RECIPE_NUMBER   BIGINT          NULL COMMENT '신고된 레시피 번호 (FK)',
    SIREN_REASON    VARCHAR(255)    NOT NULL COMMENT '신고사유',
    SIREN_DATE      DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '신고일시',
    SIREN_TYPE      VARCHAR(100)    NOT NULL COMMENT '신고대상 종류 (게시글, 댓글, 레시피)',
    PRIMARY KEY (SIREN_NUMBER),
    CONSTRAINT FK_SIREN_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE, -- 신고자가 탈퇴하면 신고내역도 삭제 (정책에 따라 변경 가능)
    CONSTRAINT FK_SIREN_BOARD FOREIGN KEY (BOARD_NUMBER) REFERENCES DR_BOARD(BOARD_NUMBER) ON DELETE CASCADE, -- 원본 삭제시 신고내역도 삭제
    CONSTRAINT FK_SIREN_REPLY FOREIGN KEY (REPLY_NUMBER) REFERENCES DR_REPLY(REPLY_NUMBER) ON DELETE CASCADE, -- 원본 삭제시 신고내역도 삭제
    CONSTRAINT FK_SIREN_RECIPE FOREIGN KEY (RECIPE_NUMBER) REFERENCES DR_RECIPE(RECIPE_NUMBER) ON DELETE CASCADE, -- 원본 삭제시 신고내역도 삭제
    CONSTRAINT CHK_SIREN_TYPE CHECK (SIREN_TYPE IN ('게시글', '댓글', '레시피')),
    CONSTRAINT CHK_SIREN_TARGET CHECK ( -- 신고 타입에 맞는 대상 번호만 존재해야 함
        (SIREN_TYPE = '게시글' AND BOARD_NUMBER IS NOT NULL AND REPLY_NUMBER IS NULL AND RECIPE_NUMBER IS NULL) OR
        (SIREN_TYPE = '댓글' AND BOARD_NUMBER IS NULL AND REPLY_NUMBER IS NOT NULL AND RECIPE_NUMBER IS NULL) OR
        (SIREN_TYPE = '레시피' AND BOARD_NUMBER IS NULL AND REPLY_NUMBER IS NULL AND RECIPE_NUMBER IS NOT NULL)
    )
    -- UNIQUE KEY UK_SIREN_USER_TARGET (USER_NUMBER, BOARD_NUMBER, REPLY_NUMBER, RECIPE_NUMBER) -- 사용자가 동일 대상을 중복 신고 못하게 할 경우 (NULL 처리 주의)
) COMMENT '신고 정보 테이블';

-- 찜 테이블 (DR_STEAM)
CREATE TABLE DR_STEAM (
    STEAM_NUMBER    BIGINT      NOT NULL AUTO_INCREMENT COMMENT '찜 번호 (PK)',
    USER_NUMBER     BIGINT      NOT NULL COMMENT '찜한 회원번호 (FK)',
    RECIPE_NUMBER   BIGINT      NOT NULL COMMENT '찜한 레시피 번호 (FK)',
    STEAM_DATE      DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '찜한 날짜',
    PRIMARY KEY (STEAM_NUMBER),
    CONSTRAINT FK_STEAM_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE,
    CONSTRAINT FK_STEAM_RECIPE FOREIGN KEY (RECIPE_NUMBER) REFERENCES DR_RECIPE(RECIPE_NUMBER) ON DELETE CASCADE,
    UNIQUE KEY UK_STEAM_USER_RECIPE (USER_NUMBER, RECIPE_NUMBER) -- 사용자는 레시피당 한 번만 찜 가능
) COMMENT '레시피 찜 테이블';

-- 점수 테이블 (DR_SCORE) - 용도가 불분명하여 기본 구조만 생성
CREATE TABLE DR_SCORE (
    SCORE_NUMBER    BIGINT      NOT NULL AUTO_INCREMENT COMMENT '점수 번호 (PK)',
    USER_NUMBER     BIGINT      NOT NULL COMMENT '점수 부여된 회원번호 (FK)',
    SCORE_GET       INT         NOT NULL COMMENT '획득 점수',
    SCORE_DATE      DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '점수 부여 일시',
    SCORE_REASON    VARCHAR(255) NULL COMMENT '점수 부여 사유',
    PRIMARY KEY (SCORE_NUMBER),
    CONSTRAINT FK_SCORE_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE,
    CONSTRAINT CHK_SCORE_GET CHECK (SCORE_GET >= 0)
) COMMENT '점수 테이블 (용도 확인 필요)';

-- 포인트 테이블 (DR_POINT)
CREATE TABLE DR_POINT (
    POINT_NUMBER    BIGINT          NOT NULL AUTO_INCREMENT COMMENT '포인트 번호 (PK)',
    USER_NUMBER     BIGINT          NOT NULL COMMENT '포인트 변경 회원번호 (FK)',
    POINT_CHANGE    INT             NOT NULL COMMENT '포인트 변동량 (+/-)',
    POINT_NOTE      VARCHAR(255)    NULL COMMENT '포인트 변동 내용/사유',
    POINT_DATE      DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '포인트 변동 일시',
    -- POINT_USE/POINT_GET 대신 POINT_CHANGE 사용, POINT_NOTE로 사유 기록
    -- POINT_TYPE ENUM('신규가입', '글작성', '상품구매', '출석체크', '관리자', '사용') NULL COMMENT '포인트 타입', -- 필요시 ENUM 타입 사용
    PRIMARY KEY (POINT_NUMBER),
    CONSTRAINT FK_POINT_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE
) COMMENT '포인트 변동 내역 테이블';

-- 출석 테이블 (DR_DAILY)
CREATE TABLE DR_DAILY (
    DAILY_NUMBER    BIGINT      NOT NULL AUTO_INCREMENT COMMENT '출석 번호 (PK)',
    USER_NUMBER     BIGINT      NOT NULL COMMENT '출석 회원번호 (FK)',
    DAILY_DATE      DATE        NOT NULL COMMENT '출석 날짜',
    PRIMARY KEY (DAILY_NUMBER),
    CONSTRAINT FK_DAILY_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE,
    UNIQUE KEY UK_DAILY_USER_DATE (USER_NUMBER, DAILY_DATE) -- 사용자는 하루에 한 번만 출석 가능
) COMMENT '출석 체크 테이블';

-- 채팅방 테이블 (DR_CHAT_SESSION)
CREATE TABLE DR_CHAT_SESSION (
    SESSION_NUMBER  BIGINT          NOT NULL AUTO_INCREMENT COMMENT '채팅방 번호 (PK)',
    USER_NUMBER     BIGINT          NOT NULL COMMENT '채팅방 생성/참여 회원번호 (FK)',
    SESSION_TITLE   VARCHAR(100)    NULL COMMENT '채팅방 제목',
    CREATE_DATE     DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '채팅방 생성 날짜',
    PRIMARY KEY (SESSION_NUMBER),
    CONSTRAINT FK_CHAT_SESSION_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE CASCADE
) COMMENT '채팅방 정보 테이블';

-- 채팅 내용 테이블 (DR_CHAT)
CREATE TABLE DR_CHAT (
    CHAT_NUMBER     BIGINT      NOT NULL AUTO_INCREMENT COMMENT '채팅 번호 (PK)',
    SESSION_NUMBER  BIGINT      NOT NULL COMMENT '채팅방 번호 (FK)',
    USER_NUMBER     BIGINT      NULL COMMENT '메시지 작성 회원번호 (FK)', -- NULL이면 봇 메시지?
    USER_MSG        TEXT        NULL COMMENT '사용자 메시지',
    BOT_REPLY       TEXT        NULL COMMENT '봇 응답 메시지',
    CHAT_TIME       DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '메시지 시간',
    PRIMARY KEY (CHAT_NUMBER),
    CONSTRAINT FK_CHAT_SESSION FOREIGN KEY (SESSION_NUMBER) REFERENCES DR_CHAT_SESSION(SESSION_NUMBER) ON DELETE CASCADE,
    CONSTRAINT FK_CHAT_USER FOREIGN KEY (USER_NUMBER) REFERENCES DR_USER(USER_NUMBER) ON DELETE SET NULL -- 사용자가 삭제되도 메시지는 남김
) COMMENT '채팅 내용 테이블';

-- 관리자 테이블 (DR_MANAGER)
CREATE TABLE DR_MANAGER (
    MANAGER_NUMBER  BIGINT          NOT NULL AUTO_INCREMENT COMMENT '관리자 번호 (PK)',
    MANAGER_EMAIL   VARCHAR(100)    NOT NULL COMMENT '관리자 이메일 (UK)',
    MANAGER_PW      VARCHAR(100)    NOT NULL COMMENT '관리자 비밀번호',
    MANAGER_NAME    VARCHAR(100)    NOT NULL COMMENT '관리자 이름',
    MANAGER_SORT    VARCHAR(100)    NULL COMMENT '관리자 분류/권한',
    PRIMARY KEY (MANAGER_NUMBER),
    UNIQUE KEY UK_MANAGER_EMAIL (MANAGER_EMAIL)
) COMMENT '관리자 정보 테이블';

-- ========================================================
-- 인덱스 추가 (필요에 따라 추가/수정)
-- ========================================================
-- 외래 키 컬럼에는 자동으로 인덱스가 생성되지 않는 경우가 많으므로 추가 권장
ALTER TABLE DR_BOARD ADD INDEX IDX_BOARD_USER (USER_NUMBER);
ALTER TABLE DR_RECIPE ADD INDEX IDX_RECIPE_USER (USER_NUMBER);
ALTER TABLE DR_REPLY ADD INDEX IDX_REPLY_USER (USER_NUMBER);
ALTER TABLE DR_REPLY ADD INDEX IDX_REPLY_BOARD (BOARD_NUMBER);
ALTER TABLE DR_REPLY ADD INDEX IDX_REPLY_RECIPE (RECIPE_NUMBER);
ALTER TABLE DR_GOOD ADD INDEX IDX_GOOD_USER (USER_NUMBER);
ALTER TABLE DR_GOOD ADD INDEX IDX_GOOD_BOARD (BOARD_NUMBER);
ALTER TABLE DR_GOOD ADD INDEX IDX_GOOD_RECIPE (RECIPE_NUMBER);
ALTER TABLE DR_PHOTO ADD INDEX IDX_PHOTO_USER (USER_NUMBER);
ALTER TABLE DR_PHOTO ADD INDEX IDX_PHOTO_BOARD (BOARD_NUMBER);
ALTER TABLE DR_PHOTO ADD INDEX IDX_PHOTO_RECIPE (RECIPE_NUMBER);
ALTER TABLE DR_PHOTO ADD INDEX IDX_PHOTO_PRODUCT (PRODUCT_NUMBER);
ALTER TABLE DR_SIREN ADD INDEX IDX_SIREN_USER (USER_NUMBER);
ALTER TABLE DR_SIREN ADD INDEX IDX_SIREN_BOARD (BOARD_NUMBER);
ALTER TABLE DR_SIREN ADD INDEX IDX_SIREN_REPLY (REPLY_NUMBER);
ALTER TABLE DR_SIREN ADD INDEX IDX_SIREN_RECIPE (RECIPE_NUMBER);
ALTER TABLE DR_STEAM ADD INDEX IDX_STEAM_USER (USER_NUMBER);
ALTER TABLE DR_STEAM ADD INDEX IDX_STEAM_RECIPE (RECIPE_NUMBER);
ALTER TABLE DR_SCORE ADD INDEX IDX_SCORE_USER (USER_NUMBER);
ALTER TABLE DR_POINT ADD INDEX IDX_POINT_USER (USER_NUMBER);
ALTER TABLE DR_DAILY ADD INDEX IDX_DAILY_USER (USER_NUMBER);
ALTER TABLE DR_CHAT_SESSION ADD INDEX IDX_CHAT_SESSION_USER (USER_NUMBER);
ALTER TABLE DR_CHAT ADD INDEX IDX_CHAT_SESSION (SESSION_NUMBER);
ALTER TABLE DR_CHAT ADD INDEX IDX_CHAT_USER (USER_NUMBER);
