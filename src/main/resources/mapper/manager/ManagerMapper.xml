<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.manager.ManagerMapper">

    <select id="managerLogin" resultType="ManagerSessionDTO">
        SELECT MANAGER_NAME
        FROM DR_MANAGER
        WHERE MANAGER_EMAIL = #{managerEmail} AND MANAGER_PW = #{managerPw}
    </select>

    <select id="dashBoardInfo" resultType="com.dr.dto.manager.DashBoardDTO"> <!-- resultType 경로 확인 -->
        SELECT
        (SELECT COUNT(*) FROM DR_USER) AS userAll,
        -- numAll을 게시글 수 + 레시피 수로 변경
        ( (SELECT COUNT(*) FROM DR_BOARD) + (SELECT COUNT(*) FROM DR_RECIPE) ) AS numAll,
        -- 나머지 신고 관련 카운트는 그대로 유지 (값이 0이어도 쿼리 자체는 문제 없음)
        (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '게시글') AS boardNum,
        (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '레시피') AS recipeNum,
        (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '댓글') AS replyNum,
        DATE_FORMAT(NOW(), '%Y-%m-%d') AS today
    </select>

    <select id="managerInfo" resultType="ManagerDTO">
        SELECT
        M.MANAGER_NAME AS managerName,
        M.MANAGER_EMAIL AS managerEmail,
        M.MANAGER_SORT AS managerSort
        FROM
        DR_MANAGER M
    </select>

    <select id="manageUser" resultType="ManagerUserDTO">
        SELECT
            U.USER_NUMBER,
            U.USER_NICKNAME,
            U.USER_STATUS,
            U.USER_PHONE,
            U.USER_EMAIL
        FROM
            DR_USER U
        ORDER BY
            U.USER_NUMBER ASC
    </select>

    <delete id="userOut" parameterType="Integer">
        DELETE
        FROM DR_USER
        WHERE USER_NUMBER = #{userNumber}
    </delete>

    <update id="userPause" parameterType="Integer">
        UPDATE DR_USER
        SET USER_STATUS = '7일정지'
        WHERE USER_NUMBER = #{userNumber}
    </update>

    <select id="userSearch" parameterType="int" resultType="ManagerUserDTO">
        SELECT  U.USER_NUMBER,
                U.USER_NICKNAME,
                U.USER_STATUS,
                U.USER_PHONE,
                U.USER_EMAIL
        FROM DR_USER U
        WHERE U.USER_NUMBER = #{userNumber}
    </select>

    <select id="showBoard" resultType="ManagerBoardDTO">
        SELECT
        B.BOARD_NUMBER,
        B.BOARD_TITLE,
        U.USER_NICKNAME,
        COUNT(G.GOOD_NUMBER) AS goodCount,
        B.BOARD_WRITE_DATE,
        B.BOARD_TYPE
        FROM
        DR_BOARD B
        JOIN
        DR_USER U ON B.USER_NUMBER = U.USER_NUMBER
        LEFT JOIN
        DR_GOOD G ON B.BOARD_NUMBER = G.BOARD_NUMBER
        GROUP BY
        B.BOARD_NUMBER, B.BOARD_TITLE, U.USER_NICKNAME, B.BOARD_WRITE_DATE, B.BOARD_TYPE
        ORDER BY
        B.BOARD_WRITE_DATE DESC
    </select>

    <delete id="boardDelete" parameterType="Integer">
        DELETE
        FROM DR_BOARD
        WHERE BOARD_NUMBER = #{boardNumber}
    </delete>

    <select id="boardSearch" parameterType="int" resultType="ManagerBoardDTO">
        SELECT
            B.BOARD_NUMBER,
            B.BOARD_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            B.BOARD_WRITE_DATE,
            B.BOARD_TYPE
        FROM
            DR_BOARD B
                JOIN
            DR_USER U ON B.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON B.BOARD_NUMBER = G.BOARD_NUMBER
        WHERE
            B.BOARD_NUMBER = #{boardNumber}
        GROUP BY
            B.BOARD_NUMBER,
            B.BOARD_TITLE,
            U.USER_NICKNAME,
            B.BOARD_WRITE_DATE,
            B.BOARD_TYPE
    </select>

    <select id="showRecipe" resultType="ManagerRecipeDTO">
        SELECT
        R.RECIPE_NUMBER,
        R.RECIPE_TITLE,
        U.USER_NICKNAME,
        COUNT(G.GOOD_NUMBER) AS goodCount,
        R.RECIPE_WRITE_DATE,
        R.RECIPE_TYPE
        FROM
        DR_RECIPE R
        JOIN
        DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
        LEFT JOIN
        DR_GOOD G ON R.RECIPE_NUMBER = G.RECIPE_NUMBER
        GROUP BY
        R.RECIPE_NUMBER, R.RECIPE_TITLE, U.USER_NICKNAME, R.RECIPE_WRITE_DATE, R.RECIPE_TYPE
        ORDER BY
        R.RECIPE_WRITE_DATE DESC
    </select>

    <delete id="recipeDelete" parameterType="Integer">
        DELETE
        FROM DR_RECIPE
        WHERE RECIPE_NUMBER = #{recipeNumber}
    </delete>

    <select id="recipeSearch" parameterType="int" resultType="ManagerRecipeDTO">
        SELECT
            R.RECIPE_NUMBER,
            R.RECIPE_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            R.RECIPE_WRITE_DATE,
            R.RECIPE_TYPE
        FROM
            DR_RECIPE R
                JOIN
            DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON R.RECIPE_NUMBER = G.RECIPE_NUMBER
        WHERE
            R.RECIPE_NUMBER = #{recipeNumber}
        GROUP BY
            R.RECIPE_NUMBER, R.RECIPE_TITLE, U.USER_NICKNAME, R.RECIPE_WRITE_DATE, R.RECIPE_TYPE
    </select>

    <select id="showReply" resultType="ManagerCommentDTO">
        SELECT R.REPLY_NUMBER , R.REPLY_TEXT , U.USER_NICKNAME , U.USER_PHONE , R.REPLY_WRITE_DATE , B.BOARD_NUMBER , RR.RECIPE_NUMBER , B.BOARD_TYPE , RR.RECIPE_TYPE
        FROM DR_REPLY R
        JOIN DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
        LEFT JOIN DR_BOARD B ON R.BOARD_NUMBER = B.BOARD_NUMBER
        LEFT JOIN DR_RECIPE RR ON R.RECIPE_NUMBER = RR.RECIPE_NUMBER
        ORDER BY R.REPLY_WRITE_DATE DESC
    </select>

    <delete id="replyDelete" parameterType="Integer">
        DELETE
        FROM DR_REPLY
        WHERE REPLY_NUMBER = #{replyNumber}
    </delete>

    <select id="replySearch" parameterType="int" resultType="ManagerCommentDTO">
        SELECT R.REPLY_NUMBER , R.REPLY_TEXT , U.USER_NICKNAME , U.USER_PHONE , R.REPLY_WRITE_DATE ,  B.BOARD_NUMBER , RR.RECIPE_NUMBER , B.BOARD_TYPE , RR.RECIPE_TYPE
        FROM DR_REPLY R
                 JOIN DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
                 LEFT JOIN DR_BOARD B ON R.BOARD_NUMBER = B.BOARD_NUMBER
                 LEFT JOIN DR_RECIPE RR ON R.RECIPE_NUMBER = RR.RECIPE_NUMBER
        WHERE
            R.REPLY_NUMBER = #{replyNumber}
    </select>

    <select id="showPoint" resultType="ManagerPointDTO">
        SELECT
        P.POINT_NUMBER,
        U.USER_NICKNAME,
        U.USER_EMAIL,
        P.POINT_NOTE,
        P.POINT_CHANGE,
        P.POINT_DATE,
        SUM(P.POINT_CHANGE) OVER (PARTITION BY U.USER_NUMBER ORDER BY P.POINT_DATE) AS POINT_SUM
        FROM
        DR_POINT P
        JOIN
        DR_USER U ON P.USER_NUMBER = U.USER_NUMBER
        ORDER BY
        P.POINT_DATE DESC
    </select>

    <delete id="pointDelete" parameterType="Integer">
        DELETE
        FROM DR_POINT
        WHERE POINT_NUMBER = #{pointNumber}
    </delete>

    <update id="takePoint" parameterType="Integer">
        UPDATE DR_POINT
        SET POINT_CHANGE = 0
        WHERE POINT_NUMBER = #{pointNumber}
    </update>

    <select id="pointSearch" parameterType="String" resultType="ManagerPointDTO">
        SELECT
            P.POINT_NUMBER,
            U.USER_NICKNAME,
            U.USER_EMAIL,
            P.POINT_NOTE,
            P.POINT_CHANGE,
            P.POINT_DATE,
            SUM(P.POINT_CHANGE) OVER (PARTITION BY U.USER_NUMBER ORDER BY P.POINT_DATE) AS POINT_SUM
        FROM
            DR_POINT P
                JOIN
            DR_USER U ON P.USER_NUMBER = U.USER_NUMBER
        WHERE
            U.USER_NICKNAME = #{userNickName}
        ORDER BY
            P.POINT_DATE DESC
    </select>

    <select id="showReport" resultType="ManagerReportDTO">
        SELECT
        S.SIREN_NUMBER,
        COALESCE(S.BOARD_NUMBER, S.RECIPE_NUMBER, S.REPLY_NUMBER) AS TARGET_ID,
        U.USER_NICKNAME,
        U.USER_EMAIL,
        S.SIREN_REASON,
        S.SIREN_TYPE,
        S.SIREN_DATE
        FROM
        DR_SIREN S
        JOIN DR_USER U ON S.USER_NUMBER = U.USER_NUMBER
        ORDER BY
        S.SIREN_DATE DESC
    </select>

    <delete id="reportDelete" parameterType="Integer">
        DELETE
        FROM DR_SIREN
        WHERE SIREN_NUMBER = #{sirenNumber}
    </delete>

    <select id="showProduct" resultType="ManagerProductDTO">
        SELECT
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        COUNT(*) AS PRODUCT_COUNT
        FROM
        DR_PRODUCT P
        GROUP BY
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
        ORDER BY
        P.PRODUCT_NAME ASC
    </select>

    <delete id="productDelete" parameterType="String">
        DELETE
        FROM DR_PRODUCT
        WHERE PRODUCT_NAME= #{productName}
    </delete>

    <insert id="registerProduct" parameterType="ManagerRegisterDTO" useGeneratedKeys="true" keyProperty="productNumber">
        INSERT INTO DR_PRODUCT (PRODUCT_NAME, PRODUCT_CODE, PRODUCT_PRICE)
        VALUES (#{productName}, #{productCode}, #{productPrice})
    </insert>

    <insert id="registerPhoto" parameterType="ManagerPhotoDTO" useGeneratedKeys="true" keyProperty="photoNumber">
        INSERT INTO DR_PHOTO (PHOTO_ORIGINAL, PHOTO_LOCAL, PHOTO_SIZE, PHOTO_UPLOAD_DATE, PRODUCT_NUMBER)
        VALUES (#{photoOriginal}, #{photoLocal}, #{photoSize},
        <choose>
            <when test="photoUpload != null and photoUpload != ''">
                STR_TO_DATE(#{photoUpload}, '%Y-%m-%d %H:%i:%s'),
            </when>
            <otherwise>
                NOW(),
            </otherwise>
        </choose>
        #{productNumber})
    </insert>

    <select id="updateShow" parameterType="String" resultType="ManagerRegisterDTO">
        SELECT P.PRODUCT_NAME , P.PRODUCT_PRICE , PP.PHOTO_LOCAL
        FROM DR_PRODUCT P
                 LEFT JOIN DR_PHOTO PP ON P.PRODUCT_NUMBER = PP.PRODUCT_NUMBER
        WHERE P.PRODUCT_NAME = #{productName}
        ORDER BY PP.PHOTO_NUMBER ASC
            LIMIT 1
    </select>

    <update id="productUpdate" parameterType="ManagerRegisterDTO">
        UPDATE DR_PRODUCT
        SET PRODUCT_NAME = #{productName},
        PRODUCT_CODE = #{productCode},
        PRODUCT_PRICE = #{productPrice}
        WHERE PRODUCT_NUMBER = #{productNumber}
    </update>

</mapper>