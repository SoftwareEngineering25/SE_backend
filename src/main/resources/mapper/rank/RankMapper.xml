<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.rank.RankMapper">

    <select id="getRankList" parameterType="Long" resultType="RankDTO">
        SELECT
            RANK_DATA.`RANK`,
            RANK_DATA.USER_NICKNAME,
            COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
            RANK_DATA.SCORE_GET
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS `RANK`,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
                     U.PROFILE_PIC,
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
                     FROM DR_PHOTO P
                     WHERE P.USER_NUMBER IS NOT NULL
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
             ) RANK_DATA
        WHERE RANK_DATA.USER_NUMBER = #{userNumber}
    </select>

    <select id="fiftyRankList" resultType="RankDTO">
        SELECT
        RANK_DATA.`RANK`,
        RANK_DATA.USER_NICKNAME,
        COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
        RANK_DATA.SCORE_GET,
        RANK_DATA.USER_NUMBER
        FROM (
        SELECT
        DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS `RANK`,
        U.USER_NICKNAME,
        LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
        U.PROFILE_PIC,
        SUM(S.SCORE_GET) AS SCORE_GET,
        U.USER_NUMBER
        FROM DR_USER U
        JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
        LEFT JOIN (
        SELECT
        P.USER_NUMBER,
        P.PHOTO_LOCAL,
        ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
        FROM DR_PHOTO P
        WHERE P.USER_NUMBER IS NOT NULL
        ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
        GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
        ) RANK_DATA
        WHERE RANK_DATA.`RANK` &lt; 51
        ORDER BY RANK_DATA.`RANK` ASC
    </select>

    <select id="Top5Rank" resultType="RankDTO">
        SELECT
        RANK_DATA.RANK,
        RANK_DATA.USER_NICKNAME,
        COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
        RANK_DATA.SCORE_GET,
        RANK_DATA.USER_NUMBER
        FROM (
        SELECT
        DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
        U.USER_NICKNAME,
        LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
        U.PROFILE_PIC,
        SUM(S.SCORE_GET) AS SCORE_GET,
        U.USER_NUMBER
        FROM DR_USER U
        JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
        LEFT JOIN (
        SELECT
        P.USER_NUMBER,
        P.PHOTO_LOCAL,
        ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
        FROM DR_PHOTO P
        WHERE P.USER_NUMBER IS NOT NULL
        ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
        GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
        ) RANK_DATA
        WHERE RANK_DATA.RANK &lt; 6
        ORDER BY RANK_DATA.RANK ASC
    </select>

    <insert id="insertPoint" parameterType="PointCheckDTO" useGeneratedKeys="true" keyProperty="pointNumber">
        INSERT INTO DR_POINT (POINT_CHANGE, POINT_NOTE, POINT_DATE, USER_NUMBER)
        VALUES (#{pointGet}, #{pointNote}, NOW(), #{userNumber})
    </insert>

    <select id="top10Rank" resultType="RankDTO">
        SELECT
            RANK_DATA.RANK,
            RANK_DATA.USER_NICKNAME,
            COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
            RANK_DATA.SCORE_GET,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
                     U.PROFILE_PIC,
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
                     FROM DR_PHOTO P
                     WHERE P.USER_NUMBER IS NOT NULL
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 6 AND 10
        ORDER BY RANK_DATA.RANK ASC
    </select>

    <select id="top20Rank" resultType="RankDTO">
        SELECT
            RANK_DATA.RANK,
            RANK_DATA.USER_NICKNAME,
            COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
            RANK_DATA.SCORE_GET,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
                     U.PROFILE_PIC,
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
                     FROM DR_PHOTO P
                     WHERE P.USER_NUMBER IS NOT NULL
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 11 AND 20
        ORDER BY RANK_DATA.RANK ASC
    </select>

    <select id="top30Rank" resultType="RankDTO">
        SELECT
            RANK_DATA.RANK,
            RANK_DATA.USER_NICKNAME,
            COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
            RANK_DATA.SCORE_GET,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
                     U.PROFILE_PIC,
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
                     FROM DR_PHOTO P
                     WHERE P.USER_NUMBER IS NOT NULL
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 21 AND 30
        ORDER BY RANK_DATA.RANK ASC
    </select>

    <select id="topOtherRank" resultType="RankDTO">
        SELECT
            RANK_DATA.RANK,
            RANK_DATA.USER_NICKNAME,
            COALESCE(RANK_DATA.LATEST_PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL,
            RANK_DATA.SCORE_GET,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL AS LATEST_PHOTO_LOCAL,
                     U.PROFILE_PIC,
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD_DATE DESC) AS RN
                     FROM DR_PHOTO P
                     WHERE P.USER_NUMBER IS NOT NULL
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.PROFILE_PIC, U.USER_NUMBER
             ) RANK_DATA
        WHERE RANK_DATA.RANK > 50
        ORDER BY RANK_DATA.RANK ASC
    </select>

</mapper>