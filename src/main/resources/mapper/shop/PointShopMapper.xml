<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.shop.PointShopMapper">

    <!-- 내 포인트 조회 (MySQL 호환) -->
    <select id="getMyPoint" parameterType="Long" resultType="Long">
        SELECT COALESCE(SUM(DP.POINT_CHANGE), 0) AS TOTAL_POINT -- POINT_CHANGE 사용, 결과가 NULL일 경우 0 반환
        FROM DR_USER DU
                 LEFT JOIN DR_POINT DP ON DU.USER_NUMBER = DP.USER_NUMBER -- LEFT JOIN 사용 권장
        WHERE DU.USER_NUMBER = #{userNumber}
        -- GROUP BY DU.USER_NUMBER -- 필요시 추가 (결과가 항상 1행이므로 생략 가능)
    </select>

    <!-- 모든 상품 조회 (MySQL 8.0+ 호환, 사진 조회 수정) -->
    <select id="selectAllProduct" resultType="PointShopDTO">
        SELECT
            P_PHOTO.PHOTO_LOCAL,
            P_INFO.PRODUCT_NAME,
            P_INFO.PRODUCT_PRICE,
            P_INFO.PRODUCT_COUNT
        FROM (
                 -- 상품 정보 및 재고 집계
                 SELECT
                     PRODUCT_NAME,
                     MIN(PRODUCT_PRICE) AS PRODUCT_PRICE, -- 동일 상품명 가격이 같다고 가정
                     COUNT(PRODUCT_NUMBER) AS PRODUCT_COUNT,
                     MIN(PRODUCT_NUMBER) AS REPRESENTATIVE_PRODUCT_NUMBER -- 대표 상품 번호 (사진 조인용)
                 FROM DR_PRODUCT
                 GROUP BY PRODUCT_NAME
             ) P_INFO
                 LEFT JOIN (
            -- 각 상품명의 대표 사진 하나 조회
            SELECT
                DPH.PHOTO_LOCAL,
                DPH.PRODUCT_NUMBER,
                ROW_NUMBER() OVER (PARTITION BY DP.PRODUCT_NAME ORDER BY DPH.PHOTO_NUMBER ASC) as RN
            FROM DR_PHOTO DPH
                     JOIN DR_PRODUCT DP ON DPH.PRODUCT_NUMBER = DP.PRODUCT_NUMBER
            WHERE DPH.PRODUCT_NUMBER IS NOT NULL
        ) P_PHOTO ON P_INFO.REPRESENTATIVE_PRODUCT_NUMBER = P_PHOTO.PRODUCT_NUMBER AND P_PHOTO.RN = 1
        ORDER BY P_INFO.PRODUCT_PRICE ASC
    </select>

    <!-- 유저의 선택 상품 및 갯수만큼의 코드 조회 (MySQL 호환) -->
    <select id="getProductCode" parameterType="PointShopDTO" resultType="String">
        SELECT PRODUCT_CODE
        FROM DR_PRODUCT
        WHERE PRODUCT_NAME = #{productName}
        -- AND PRODUCT_CODE IS NOT NULL -- 코드가 있는 상품만 (선택적)
        ORDER BY PRODUCT_NUMBER ASC -- 일관된 순서 보장 (선택적)
            LIMIT #{quantity} -- ROWNUM 대신 LIMIT 사용
    </select>

    <!-- 유저의 핸드폰 번호 조회 (MySQL 호환) -->
    <select id="getUserPhone" parameterType="Long" resultType="String">
        SELECT USER_PHONE
        FROM DR_USER
        WHERE USER_NUMBER = #{userNumber}
    </select>

    <!-- 유저가 사용한 포인트 테이블에 추가 (MySQL 호환: AUTO_INCREMENT) -->
    <insert id="insertUsePoint" parameterType="PointShopDTO" useGeneratedKeys="true" keyProperty="pointNumber">
        <!-- <selectKey> 제거 -->
        <!-- 컬럼명 확인: POINT_CHANGE -->
        INSERT INTO DR_POINT (POINT_NOTE, POINT_CHANGE, USER_NUMBER, POINT_DATE)
        VALUES ('상품구매', -#{totalCost}, #{userNumber}, NOW()) -- POINT_USE 대신 POINT_CHANGE에 음수 값, POINT_DATE 추가
    </insert>

    <!-- 유저에게 코드 전송후 삭제할 쿼리 (MySQL 호환) -->
    <delete id="deleteCode" parameterType="PointShopDTO">
        DELETE FROM DR_PRODUCT
        WHERE PRODUCT_CODE IN (
            -- 삭제할 상품 코드 목록 조회
            SELECT PRODUCT_CODE
            FROM ( -- MySQL에서는 DELETE의 서브쿼리에서 동일 테이블 직접 참조 시 임시 테이블 필요
                     SELECT PRODUCT_CODE
                     FROM DR_PRODUCT
                     WHERE PRODUCT_NAME = #{productName}
                     ORDER BY PRODUCT_NUMBER ASC -- 일관된 순서 보장 (선택적)
                         LIMIT #{quantity} -- ROWNUM 대신 LIMIT 사용
                 ) TMP
        )
    </delete>

</mapper>