# .github/workflows/ci.yml

name: Java CI with Gradle  # 워크플로우의 이름 (GitHub Actions 탭에 표시됨)

on: # 워크플로우를 실행할 이벤트 트리거 설정
  push:
    branches: [ "main", "develop" ] # main 또는 develop 브랜치에 push될 때 실행
  pull_request:
    branches: [ "main", "develop" ] # main 또는 develop 브랜치로 pull request가 생성/업데이트될 때 실행

permissions: # 워크플로우 실행에 필요한 권한 (선택 사항, 기본값으로도 충분할 수 있음)
  contents: read

jobs: # 워크플로우는 하나 이상의 job으로 구성됨
  build: # job의 ID (여기서는 'build')
    runs-on: ubuntu-latest # job을 실행할 가상 환경 (GitHub 호스팅 러너 사용)

    steps: # job 내에서 실행될 단계들
      - name: Checkout repository # 1. 소스 코드 체크아웃
        uses: actions/checkout@v4 # GitHub에서 제공하는 표준 액션 사용

      - name: Set up JDK 17 # 2. JDK 설정 (프로젝트에 맞는 버전으로 수정)
        uses: actions/setup-java@v4
        with:
          java-version: '17' # 사용할 JDK 버전
          distribution: 'temurin' # 사용할 JDK 배포판 (Temurin, Zulu, Adopt 등)

      - name: Setup Gradle # 3. Gradle 캐싱 설정 (빌드 속도 향상)
        uses: gradle/actions/setup-gradle@v3 # Gradle 공식 액션 사용
        # with:
        #   gradle-version: 'wrapper' # 프로젝트의 Gradle Wrapper 사용 (권장)
        #   # 또는 특정 Gradle 버전 명시: gradle-version: '8.7'

      - name: Build with Gradle # 4. Gradle로 빌드 실행
        run: ./gradlew build # 프로젝트 루트의 Gradle Wrapper를 사용하여 build 태스크 실행
        # (Windows 환경이라면 gradlew.bat build)

    # - name: Test with Gradle # (선택 사항: build 태스크에 test가 포함되어 있다면 생략 가능)
    #   run: ./gradlew test

    # - name: Upload build artifacts (선택 사항: 빌드 결과물 저장)
    #   uses: actions/upload-artifact@v4
    #   with:
    //         name: dr-backend-jar # 아티팩트 이름
    #         path: build/libs/*.jar # 저장할 파일 경로 (프로젝트 구조에 맞게 수정)